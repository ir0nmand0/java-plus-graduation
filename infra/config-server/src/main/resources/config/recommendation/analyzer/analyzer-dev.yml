spring:
  application:
    name: analyzer
  cloud:
    config:
      discovery:
        enabled: true
        service-id: config-server
      fail-fast: true
      retry:
        max-attempts: 5
        initial-interval: 2000
        max-interval: 6000
        multiplier: 1.5
    loadbalancer:
      retry:
        enabled: true
        retry-on-all-operations: true
      service-discovery:
        timeout: 1s
      cache:
        enabled: true
        ttl: 5s
  datasource:
    url: jdbc:postgresql://analyzer-db:5432/${POSTGRES_DB:analyzer}
    username: ${POSTGRES_USER:root}
    password: ${POSTGRES_PASSWORD:root}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      minimum-idle: 5
      maximum-pool-size: 15
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-test-query: SELECT 1
      leak-detection-threshold: 60000
  sql:
    init:
      mode: always
      platform: postgresql
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
      continue-on-error: false
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 50
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        generate_statistics: false
  kafka:
    consumer:
      bootstrap-servers: kafka:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://schema-registry:9102
        specific.avro.reader: true
        auto.offset.reset: earliest
        max.poll.records: 500
        fetch.min.bytes: 1024
        fetch.max.wait.ms: 500
      group-id: ${spring.application.name}
    producer:
      bootstrap-servers: kafka:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://schema-registry:9102
        acks: all
        retries: 3
        batch.size: 16384
        linger.ms: 5

eureka:
  client:
    fetch-registry: true
    registry-fetch-interval-seconds: 2
    initial-instance-info-replication-interval-seconds: 2
    service-url:
      defaultZone: http://${eureka.instance.hostname:discovery-server}:${eureka.instance.port:8761}/eureka/
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${random.uuid}
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 20

server:
  port: 0
  tomcat:
    max-threads: 200
    min-spare-threads: 20
    connection-timeout: 5000
    max-connections: 8192
    accept-count: 100

grpc:
  server:
    port: ${ANALYZER_GRPC_PORT:0}

resilience4j:
  circuitbreaker:
    instances:
      default:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  bulkhead:
    instances:
      default:
        maxConcurrentCalls: 20
  timelimiter:
    instances:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
    diskspace:
      enabled: true
    db:
      enabled: true

logging:
  level:
    root: INFO
    com.netflix.discovery: WARN
    org.springframework.cloud: INFO
    org.apache.kafka: WARN
    io.grpc: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE