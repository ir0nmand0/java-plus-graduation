{
	"info": {
		"_postman_id": "cb2bf3c4-bf7b-4b7e-a233-dd1a24bf03e2",
		"name": "feature locations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34396018"
	},
	"item": [
		{
			"name": "Добавление локации",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							"pm.test(\"Has location create response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test location 'lat' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('lat');",
							"    pm.expect(jsonData.lat, '\"lat\" must be 55.753544').to.eql(55.753544);",
							"});",
							"pm.test(\"Test location 'lon' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('lon');",
							"    pm.expect(jsonData.lon, '\"lon\" must be 37.621202').to.eql(37.621202);",
							"});",
							"pm.test(\"Test location 'radius' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('radius');",
							"    pm.expect(jsonData.radius, '\"radius\" must be 10').to.eql(10);",
							"});",
							"pm.test(\"Test location 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Красная Площадь\"').to.eql('Красная Площадь');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"lat\": 55.753544,\n    \"lon\": 37.621202,\n    \"radius\": 10,\n    \"name\": \"Красная Площадь\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение локации по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа должен быть 200\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.id).equal(target.id, 'Идентификатор локации должен соответствовать id в запросе');",
							"    pm.expect(source.lat).equal(target.lat, 'Широта локации должна соответствовать широте в запросе');",
							"    pm.expect(source.lon).equal(target.lon, 'Долгота локации должна соответствовать долготе в запросе');",
							"    pm.expect(source.radius).equal(target.radius, 'Радиус локации должен соответствовать радиусу в запросе');",
							"    pm.expect(source.name).equal(target.name, 'Название локации должно соответствовать названию локации с указанным идентификатором');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const location = await api.addLocation(rnd.getLocation());",
							"        pm.collectionVariables.set(\"response\", location)",
							"        pm.collectionVariables.set(\"locId\", location.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:locId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":locId"
					],
					"variable": [
						{
							"key": "locId",
							"value": "{{locId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение локации по id не найдено",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа должен быть 404\", function () {",
							"    pm.response.to.be.notFound;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/9999",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						"9999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение локаций",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа должен быть 200\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const location = await api.addLocation(rnd.getLocation());",
							"        pm.collectionVariables.set(\"response\", location)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/locations?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"locations"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение локации по названию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа должен быть 200\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const location = await api.addLocation(rnd.getLocation());",
							"        pm.collectionVariables.set(\"response\", location)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/locations?text=красн&from=0&size=10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"locations"
					],
					"query": [
						{
							"key": "text",
							"value": "красн"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление локации по id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const location = await api.addLocation(rnd.getLocation());",
							"        pm.collectionVariables.set(\"response\", location)",
							"        pm.collectionVariables.set(\"locId\", location.id)",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:locId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":locId"
					],
					"variable": [
						{
							"key": "locId",
							"value": "{{locId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации с пустыми координатами",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа должен быть 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"radius\": 10,\n    \"name\": \"Красная Площадь\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации с имеющимися данными",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус ответа должен быть 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"    let location, location2;",
							"    try {",
							"        location = await api.addLocation(rnd.getLocation());",
							"        location2 = await api.addLocation(rnd.getLocation());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"    pm.collectionVariables.set(\"locId\", Number(location.id))",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            name : location2.name,",
							"            lat: location2.lat,",
							"            lon: location2.lon",
							"        }),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение локации",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"    let location;",
							"    try {",
							"        location = await api.addLocation(rnd.getLocation());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"    pm.collectionVariables.set(\"locId\", location.id)",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            name : pm.variables.replaceIn('{{$randomWord}}')",
							"        }),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.ok;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:locId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":locId"
					],
					"variable": [
						{
							"key": "locId",
							"value": "{{locId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение локации с одинаковым именем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"    let location, location2;",
							"    try {",
							"        location = await api.addLocation(rnd.getLocation());",
							"        location2 = await api.addLocation(rnd.getLocation());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"    pm.collectionVariables.set(\"locId\", Number(location.id))",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            name : location2.name",
							"        }),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:locId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":locId"
					],
					"variable": [
						{
							"key": "locId",
							"value": "{{locId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события с нужной локацией",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user = await api.addUser(rnd.getUser());",
							"        const category = await api.addCategory(rnd.getCategory());",
							"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
							"        let event2 = rnd.getEvent(category.id);",
							"        let location = await api.findLocationByName(\"площадь\");",
							"        event2.location.lat = location[0].lat;",
							"        event2.location.lon = location[0].lon;",
							"        event2.stateAction = \"PUBLISH_EVENT\"",
							"        pm.collectionVariables.set('response', event2);",
							"        pm.collectionVariables.set(\"eventId\", event.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: event2,",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get(\"response\");",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.location.name).equal('Красная Площадь', 'Широта локации события должна соответствовать локации изменения');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}"
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addLocation(location, verbose=null) {",
					"        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findLocation(locationId, verbose=null) {",
					"        return this.get('/locations/' + locationId, null, \"Ошибка при поиске локации по id\", verbose);",
					"    }",
					"",
					"    async findLocationByName(name, verbose=null) {",
					"        return this.get('/locations?text=' + name, null, \"Ошибка при поиске локации по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getLocation() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString(),",
					"            lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"            lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'))",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "locId",
			"value": "",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}